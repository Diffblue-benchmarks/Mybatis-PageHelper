package com.github.pagehelper.cache;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;

import com.diffblue.deeptestutils.Reflector;
import com.github.pagehelper.cache.SimpleCache;
import org.apache.ibatis.cache.Cache;
import org.apache.ibatis.mapping.CacheBuilder;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.Properties;

@PowerMockIgnore({"javax.management.*"})
@RunWith(PowerMockRunner.class)
public class SimpleCacheTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: SimpleCache */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 80 branch to line 81
   */
  @PrepareForTest({Cache.class})
  @Test
  public void getInputZeroOutputZero() throws Exception, InvocationTargetException {

    // Arrange
    final SimpleCache objectUnderTest =
        ((SimpleCache)Reflector.getInstance("com.github.pagehelper.cache.SimpleCache"));
    final Cache cache = PowerMockito.mock(Cache.class);
    PowerMockito.doReturn(0).when(cache);
    cache.getObject(or(isA(Object.class), isNull(Object.class)));
    Reflector.setField(objectUnderTest, "CACHE", cache);
    final Object key = 0;

    // Act
    final Object retval = objectUnderTest.get(key);

    // Assert result
    Assert.assertEquals(new Integer(0), retval);
  }
}
