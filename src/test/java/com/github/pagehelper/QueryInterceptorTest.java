package com.github.pagehelper;

import static org.mockito.AdditionalMatchers.or;
import static org.mockito.Matchers.isA;
import static org.mockito.Matchers.isNull;
import static org.powermock.api.mockito.PowerMockito.mockStatic;

import com.github.pagehelper.QueryInterceptor;
import org.apache.ibatis.plugin.Interceptor;
import org.apache.ibatis.plugin.Invocation;
import org.apache.ibatis.plugin.Plugin;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.lang.reflect.Array;
import java.lang.reflect.Method;
import java.util.Properties;

@PowerMockIgnore({"javax.management.*"})
@RunWith(PowerMockRunner.class)
public class QueryInterceptorTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: QueryInterceptor */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 55 branch to line 55
   *  - conditional line 56 branch to line 56
   *  - conditional line 57 branch to line 57
   */
  @PrepareForTest({Invocation.class})
  @Test
  public void interceptInputNotNullOutputArrayIndexOutOfBoundsException() throws Throwable {

    // Arrange
    final QueryInterceptor objectUnderTest = new QueryInterceptor();
    final Invocation invocation = PowerMockito.mock(Invocation.class);
    final Object[] objectArray = {null};
    PowerMockito.doReturn(objectArray).when(invocation);
    invocation.getArgs();

    // Act
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    objectUnderTest.intercept(invocation);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 55 branch to line 55
   *  - conditional line 56 branch to line 56
   *  - conditional line 57 branch to line 57
   *  - conditional line 58 branch to line 58
   */
  @PrepareForTest({Invocation.class})
  @Test
  public void interceptInputNotNullOutputArrayIndexOutOfBoundsException2() throws Throwable {

    // Arrange
    final QueryInterceptor objectUnderTest = new QueryInterceptor();
    final Invocation invocation = PowerMockito.mock(Invocation.class);
    final Object[] objectArray = {null, null};
    PowerMockito.doReturn(objectArray).when(invocation);
    invocation.getArgs();

    // Act
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    objectUnderTest.intercept(invocation);

    // Method is not expected to return due to exception thrown
  }
}
