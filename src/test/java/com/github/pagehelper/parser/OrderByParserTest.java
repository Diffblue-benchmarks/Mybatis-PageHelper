package com.github.pagehelper.parser;

import com.diffblue.deeptestutils.Reflector;
import com.github.pagehelper.parser.OrderByParser;
import net.sf.jsqlparser.statement.select.OrderByElement;
import net.sf.jsqlparser.statement.select.SelectBody;
import net.sf.jsqlparser.statement.select.SetOperationList;
import net.sf.jsqlparser.statement.select.WithItem;
import org.junit.Assert;
import org.junit.Rule;
import org.junit.Test;
import org.junit.rules.ExpectedException;
import org.junit.runner.RunWith;
import org.powermock.api.mockito.PowerMockito;
import org.powermock.api.mockito.expectation.PowerMockitoStubber;
import org.powermock.core.classloader.annotations.PowerMockIgnore;
import org.powermock.core.classloader.annotations.PrepareForTest;
import org.powermock.modules.junit4.PowerMockRunner;

import java.lang.reflect.Array;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;
import java.util.ArrayList;
import java.util.List;

@PowerMockIgnore({"javax.management.*"})
@RunWith(PowerMockRunner.class)
public class OrderByParserTest {

  @Rule public ExpectedException thrown = ExpectedException.none();

  /* testedClasses: OrderByParser */

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 75 branch to line 79
   *  - conditional line 79 branch to line 85
   *  - conditional line 85 branch to line 85
   *  - conditional line 86 branch to line 86
   *  - conditional line 86 branch to line 87
   *  - conditional line 88 branch to line 88
   */
  @PrepareForTest({SetOperationList.class})
  @Test
  public void extraOrderByInputNotNullOutputArrayIndexOutOfBoundsException() throws Exception {

    // Arrange
    final SetOperationList selectBody = PowerMockito.mock(SetOperationList.class);
    final ArrayList arrayList2 = new ArrayList();
    final ArrayList arrayList1 = new ArrayList();
    arrayList1.add(null);
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    ((PowerMockitoStubber)PowerMockito.doReturn(arrayList)
         .doReturn(arrayList1)
         .doReturn(arrayList2))
        .when(selectBody);
    selectBody.getSelects();

    // Act
    thrown.expect(ArrayIndexOutOfBoundsException.class);
    OrderByParser.extraOrderBy(selectBody);

    // Method is not expected to return due to exception thrown
  }

  /*
   * Test generated by Diffblue Deeptest.
   * This test case covers:
   *  - conditional line 75 branch to line 79
   *  - conditional line 79 branch to line 85
   *  - conditional line 85 branch to line 85
   *  - conditional line 86 branch to line 86
   *  - conditional line 86 branch to line 91
   */
  @PrepareForTest({SetOperationList.class})
  @Test
  public void extraOrderByInputNotNullOutputNull() throws Exception {

    // Arrange
    final SetOperationList selectBody = PowerMockito.mock(SetOperationList.class);
    final ArrayList arrayList1 = new ArrayList();
    final ArrayList arrayList = new ArrayList();
    arrayList.add(null);
    ((PowerMockitoStubber)PowerMockito.doReturn(arrayList).doReturn(arrayList1)).when(selectBody);
    selectBody.getSelects();

    // Act
    final List<OrderByElement> retval = OrderByParser.extraOrderBy(selectBody);

    // Assert result
    Assert.assertEquals(null, retval);
  }
}
